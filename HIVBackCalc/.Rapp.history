qi <- function(u){
uind <- rev(which(uti<=u))[1]
if(is.na(uind))
return(0)
cs[uind]
}
#the descrete probability that a diagnosis is made i time units after infection
pidCalc <- function(i){
sapply(i,function(ii){
qi((ii+1)*intLength) - qi(ii*intLength)
})
}
#calc discrete time prob
m <- max(ti/intLength) + 1
pidProbs <- pidCalc(0:m)
pid <- function(i){
ifelse(i>m,0,pidProbs[i+1])
}
pid
}
pid
empirProbDist <- function(infPeriod,intLength=1){
ti <- sort(infPeriod[!is.na(infPeriod) & infPeriod > 0])
n <- length(ti)
qi <- function(u) {
uind <- sum(ti<=u)/n
if (is.na(uind))
return(0)
uind
}
pidCalc <- function(i) {
sapply(i, function(ii) {
qi((ii + 1) * intLength) - qi(ii * intLength)
})
}
m <- max(ti/intLength) + 1
pidProbs <- pidCalc(0:m)
pid <- function(i) {
ifelse(i > m, 0, pidProbs[i + 1])
}
pid
}
0:2.5
library(knitr)
?knit
getwd()
setwd('~/Dropbox/School/PhD/HIV_WA/public/package1.0/HIVBackCalc/')
knit('vignettes/Introduction.Rmd')
?knit
knit('vignettes/Introduction.Rmd', output='Introduction.html')
getwd()
kc = read.csv('../../../HIVBackCalc_App/development/data_KC_sim.csv')
head(kc)
save(kc, 'data/KCsim.RData')
save(kc, file='data/KCsim.RData')
head(kc)
data(kc)
?load
?save
data('data/KCSim.RData')
dir()
load('data/KCSim.RData')
ls()
head(kc)
testhistories = kc
save(testhistories, 'data/KCSim.RData')
save(testhistories, file='data/KCSim.RData')
testhistories = subset(kc, select=-c(infPeriod_imputeNA))
head(testhistories)
save(testhistories, file='data/KCSim.RData')
KCsim=testhistories
save(KCsim, file='data/KCSim.RData')
head(KCsim)
testhist=KCsim
allTimes <- seq(min(testhist$timeDx),
max(testhist$timeDx),
by=intLength)
intLength=0.25
allTimes <- seq(min(testhist$timeDx),
max(testhist$timeDx),
by=intLength)
obsCounts <- table(testhist$timeDx)
allCounts <- structure(rep(0,length(allTimes)),
class='table',
names=allTimes)
allCounts[names(allCounts)%in%names(obsCounts)] <- obsCounts
allCounts
nIncIntervals=100
nPriorInt=100
if (!is.null(nPriorInt)) {
allCounts <- c(rep(NA,nPriorInt),diagnosedCounts)
}
if (!is.null(nPriorInt)) {
allCounts <- c(rep(NA,nPriorInt),allCounts)
}
allCounts
structure(allCounts)
str(allCounts)
str(table(testhist$timeDx))
tabulateDiagnoses <- function(testhist, intLength, nPriorInt=100) {
# Vector of all intervals
allTimes <- seq(min(testhist$timeDx),
max(testhist$timeDx),
by=intLength)
# Tabulation of intervals with observed data
obsCounts <- table(testhist$timeDx)
# Account for intervals with 0 cases
allCounts <- structure(rep(0,length(allTimes)),
class='table',
names=allTimes)
allCounts[names(allCounts)%in%names(obsCounts)] <- obsCounts
# Append empty prior intervals
if (!is.null(nPriorInt)) allCounts <- c(rep(NA,nPriorInt),allCounts)
return(allCounts)
}
diagCounts = tabulateDiagnoses(KCsim, intLength=diagInterval)
diagInterval=0.25
diagCounts = tabulateDiagnoses(KCsim, intLength=diagInterval)
diagCounts
infPeriod = KCsim$infPeriod
#' Estimates discrete PDF of time from infection to diagnosis.
#'
#' This function uses HIV testing history data, or time from last negative test
#' to HIV diagnosis, to estimate a probability distribution of time from HIV
#' infection to HIV diagnosis (TID). Two "cases" of assumptions are possible:
#' a "base case" that assumes the probability of infection is uniformly
#' distributed between the last negative test and diagnosis, and an "upper bound"
#' that assumes infection occurred instantaneously after the negative test.
#'
#' @param infPeriod A vector of continuous times from last HIV test to diagnosis
#'          for a population
#' @param case One of "base_case" or "upper_bound", indicating the
#'          assumption to apply for when infection occurred within infPeriod
#' @param intLength A single number indicating the length in years of discrete
#'          time intervals by which HIV diagnoses are recorded. The default of
#'          0.25 represents a quarter-year.
#'
#' @return A function that takes integer arguments 0 and higher. Will return 0
#'          for integers greater than floor(max(infPeriod/intLength)) + 1
#' @note
#' @references
#'
#' @examples
#'
TID_pdf <- function(infPeriod,case,intLength=0.25) {
# Remove 0 or missing infPeriods
infPeriod <- sort(infPeriod[!is.na(infPeriod) & infPeriod > 0])
n <- length(infPeriod)
# Define the CDF of time from infection to diagnosis in
# the function 'qi'
switch(case,
'upper_bound'={
# Simply the empirical CDF of the infPeriods
qi <- function(u) {
uind <- sum(infPeriod<=u)/n
if (is.na(uind))
return(0)
uind
}
},
'base_case' = {
# Continuous density of time between infection and diagnosis
pi <- function(i,eta,infPeriod=infPeriod){
sapply(i,function(ii){
ints <- infPeriod[infPeriod>=ii]
sum(1/ints)/length(infPeriod)
})
}
uniqueInf <- unique(infPeriod)
p<-pi(uniqueInf,,infPeriod) * diff(c(0,uniqueInf))
cs <- cumsum(p)
# CDF of density
qi <- function(u){
uind <- rev(which(uniqueInf<=u))[1]
if(is.na(uind))
return(0)
cs[uind]
}
})
# Use the CDF to define the discrete probability of infection
# during interval i to i+1
pidCalc <- function(i){
sapply(i,function(ii){
qi((ii+1)*intLength) - qi(ii*intLength)
})
}
# Calculate the discrete PDF over the m observed intervals, and set
# probability to zero for longer intervals
m <- max(ti/intLength) + 1
pidProbs <- pidCalc(0:m)
pid <- function(i){
ifelse(i>m,0,pidProbs[i+1])
}
# Return the PDF function
return(pid)
}
?vector
testobj[['bc']][['fxn']]<-'help'
TIDobject <- vector(length=length(cases), mode='list')
cases <- c('base_case', 'upper_bound')
TIDobject <- vector(length=length(cases), mode='list')
TIDobject
?vector
names(TIDobject) <- cases
maxInt <- max(infPeriod/intLength)+1
maxInt
maxInt <- max(infPeriod/intLength, na.rm=TRUE)+1
maxInt
c=cases[1]
c
TIDobject[[c]] <- vector(mode='list', length=3)
TIDobject
names(TIDobject[[c]]) <- c('pdffxn', 'pdf', 'cdf')
TIDobject
TIDobject[[c]] <- TID_pdf(infPeriod, c, intLength)
base::source("/Users/jeanette/Dropbox/School/PhD/HIV_WA/public/package1.0/HIVBackCalc/R/tid.R")
TIDobject[[c]] <- TID_pdf(infPeriod, c, intLength)
TIDobject
TIDobject[[c]]$pdffxn <- TID_pdf(infPeriod, c, intLength)
TIDobject[[c]] <- vector(mode='list', length=3)
names(TIDobject[[c]]) <- c('pdffxn', 'pdf', 'cdf')
# PDF function
TIDobject[[c]]$pdffxn <- TID_pdf(infPeriod, c, intLength)
TIDobject
TIDobject[[c]]$pdf <- sapply(0:m, TIDobject[[c]]$pdffxn)
TIDobject[[c]]$pdf <- sapply(0:maxInt, TIDobject[[c]]$pdffxn)
TIDobject
cumsum(TID_pdf[[1]][[2]])
cumsum(TIDobject[[1]][[2]])
1-cumsum(TIDobject[[1]][[2]])
TIDobject[[c]]$cdf <- c(1, 1-cumsum(TIDobject[[c]]$pdf))
TIDobject
base::source("/Users/jeanette/Dropbox/School/PhD/HIV_WA/public/package1.0/HIVBackCalc/R/tid.R")
estimateTID(infPeriod, 0.25)
names(diagCounts)
names(diagCounts)[names(diagCounts)!='']
diagCounts
diagCounts
combineResults <- function(x) {
class(x) <- 'results'
return(x)
}
x$undiagnosed <- data.frame(time=Null, var=NULL, value=NULL)
x$undiagnosed <- data.frame(time=NULL, var=NULL, value=NULL)
data.frame(time=NULL, var=NULL, value=NULL)
rbind(data.frame(time=NULL, var=NULL, value=NULL), time=c(1,2), var=c('a','b'), value=c(1,2))
rbind(data.frame(time=NULL, var=NULL, value=NULL), data.frame(time=c(1,2), var=c('a','b'), value=c(1,2)))
base::source("/Users/jeanette/Dropbox/School/PhD/HIV_WA/public/package1.0/HIVBackCalc/R/model.R")
base::source("/Users/jeanette/Dropbox/School/PhD/HIV_WA/public/package1.0/HIVBackCalc/R/model.R")
years <- intLength*(0:length(x[[1]]$pdf))
